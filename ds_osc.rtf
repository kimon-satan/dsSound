{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf360
{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red0\green0\blue191;\red0\green115\blue0;
\red191\green0\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs28 \cf2 \
\
(\
\
	~activeSynths = \cf3 Array\cf2 .newClear(20);\
	~activeTasks = \cf3 Array\cf2 .newClear(20);\
	~activeNames = \cf3 Array\cf2 .newClear(20);\
	\
\
	~init.remove;\
	~init=\cf3 nil\cf2 ;\
	~init = \cf3 OSCresponderNode\cf2 (\cf3 nil\cf2 , \cf4 '/init'\cf2 , \{\cf3 |i, r, msg|\cf2  \
	\
	(msg).postln;  \
	\
	\}).add;\
	\
	~wave.remove;\
	~wave=\cf3 nil\cf2 ;\
	~wave = \cf3 OSCresponderNode\cf2 (\cf3 nil\cf2 , \cf4 '/wave'\cf2 , \{\cf3 |i, r, msg|\cf2  \
	\
	msg.postln;\
	\cf5 // replaced saw with LFCub ... low freqs better for overall mix\cf2 \
	\
	\
	\{\
	\cf3 var\cf2  sig, env, sig1, env1, trig, out, ts;\
				\
		ts = 32;\
		trig = 1;\
		env = \cf3 EnvGen\cf2 .kr(\cf3 Env\cf2 .new([0,1,1,0],[0.4,0.4,0.2],[4,1,-4]),trig, timeScale:ts);\
		env1 = \cf3 EnvGen\cf2 .kr(\cf3 Env\cf2 .new([0,1,0],[0.8,0.2],[3,-4]), trig, timeScale:ts);\
		\
		sig = \cf3 LFCub\cf2 .ar(\cf3 Rand\cf2 (25,50),1) * 0.2 * \cf3 LFPulse\cf2 .kr(15,0,0.4,1) * env;\
		\cf5 //sig = HPF.ar(sig,XLine.kr(Rand(100,200),1000,ts));\cf2 \
		sig = \cf3 Pan2\cf2 .ar(sig,0);\
		sig1 = \cf3 LFPar\cf2 .ar(\cf3 Rand\cf2 (25,50),5).clip2(\cf3 Rand\cf2 (0.2,0.05)) * 0.3 * \cf3 LFPulse\cf2 .kr(15,0,0.6,1) * env1;\
		\cf5 //sig1 = HPF.ar(sig1,Rand(100,200));\cf2 \
		sig1 = \cf3 Pan2\cf2 .ar(sig1,0);\
\
		out = sig + sig1 * \cf3 EnvGen\cf2 .kr(\cf3 Env\cf2 .linen(0.001,1,0.001),trig,timeScale:ts, doneAction:2);\
		\
		\
	\}.play;\
				\
	\}).add;\
	\
	~nStar.remove;\
	~nStar =\cf3 nil\cf2 ;\
	~nStar = \cf3 OSCresponderNode\cf2 (\cf3 nil\cf2 , \cf4 '/newStar'\cf2 , \{\cf3 |i, r, msg|\cf2  \
	\
	\cf3 var\cf2  index;\
		msg.postln;	\
		\
		~activeNames[msg[1]] = msg[2];\
		if(msg[2] == \cf4 \\strobingRings\cf2 )\{~activeSynths[msg[1]] = \cf3 Synth\cf2 .new(\cf4 \\strobingRings\cf2 )\};		if(msg[2] == \cf4 \\strobingLines\cf2 )\{~activeSynths[msg[1]] = \cf3 Synth\cf2 .new(\cf4 \\strobingLines\cf2 )\};\
		if(msg[2] == \cf4 \\regPulsingRings\cf2 )\{~activeSynths[msg[1]] = \cf3 Synth\cf2 .new(\cf4 \\regPulsingRings\cf2 )\};\
		if(msg[2] == \cf4 \\statFlow\cf2 )\{~activeSynths[msg[1]] = \cf3 Synth\cf2 .new(\cf4 \\statFlow\cf2 )\};\
\
\
		\
	\}).add;\
	\
	~eStar.remove;\
	~eStar =\cf3 nil\cf2 ;\
	~eStar = \cf3 OSCresponderNode\cf2 (\cf3 nil\cf2 , \cf4 '/endStar'\cf2 , \{\cf3 |i, r, msg|\cf2  \
		\
		\cf3 var\cf2  index;\
		msg.postln;	\
		\
		~activeNames[msg[1]] = \cf3 nil\cf2 ;\
		if(~activeSynths[msg[1]] != \cf3 nil\cf2 )\{~activeSynths[msg[1]].set(\cf4 \\gate\cf2 , 0)\};\
		if(~activeTasks[msg[1]] != \cf3 nil\cf2 )\{~activeTasks[msg[1]].stop; ~activeTasks[msg[1]] = \cf3 nil\cf2 \}; \cf5 //stop any task\cf2 \
		\
	\}).add;\
	\
	~uStar.remove;\
	~uStar =\cf3 nil\cf2 ;\
	~uStar = \cf3 OSCresponderNode\cf2 (\cf3 nil\cf2 , \cf4 '/updateStar'\cf2 , \{\cf3 |i, r, msg|\cf2  \
		\
		\cf3 var\cf2  index;\
	\cf5 //	msg.postln;	\cf2 \
		\
		~activeSynths[msg[1]].set(\cf4 \\size\cf2 , msg[2]);\
		\
		if(msg[3] == 1)\{\
			\cf5 //start new task for that synth\cf2 \
			\
			if(~activeTasks[msg[1]] != \cf3 nil\cf2 )\{~activeTasks[msg[1]].stop; ~activeTasks[msg[1]] = \cf3 nil\cf2 \};\
			\
			if(~activeNames[msg[1]] == \cf4 \\strobingRings\cf2 )\{\
				~activeTasks[msg[1]] = \cf3 Task\cf2 (\{\
					\
					\cf3 var\cf2  n_pulse, n_width;\
					\
					if(msg[5] > 0,\
					\{n_pulse = rrand(18,22); n_width = 0.025\},\
					\{n_pulse = rrand(7,12); n_width = 0.7/n_pulse\}\
					);\
					\
					~activeSynths[msg[1]].set(\cf4 \\pulse\cf2 , n_pulse, \cf4 \\width\cf2 , n_width);\
					\
					(msg[4]/60).wait;\
					\
					~activeSynths[msg[1]].set(\cf4 \\pulse\cf2 , 15,\cf4 \\width\cf2 , 0.04);\
					\
				\}).start;\
			\
			\};\
			\
			if(~activeNames[msg[1]] == \cf4 \\strobingLines\cf2 )\{\
				\
				if(msg[5] < 0)\{\
					~activeTasks[msg[1]] = \cf3 Task\cf2 (\{\
						~activeSynths[msg[1]].set(\cf4 \\ch\cf2 , 1);\
						(msg[4]/60).wait;\
						~activeSynths[msg[1]].set(\cf4 \\ch\cf2 , 0);\
					\}).start;\
				\}\{\
					~activeTasks[msg[1]] = \cf3 Task\cf2 (\{\
						~activeSynths[msg[1]].set(\cf4 \\cut\cf2 , 0);\
						\cf3 Synth\cf2 .new(\cf4 \\strobingLinesEvent\cf2 , [\cf4 \\size\cf2 ,msg[2],\cf4 \\length\cf2 ,msg[4]/60]);\
						\
						(msg[4]/60).wait;\
						\
						~activeSynths[msg[1]].set(\cf4 \\cut\cf2 , 1);\
						\
					\}).start;\
					\
				\};\
				\
			\};\
			\
			if(~activeNames[msg[1]] == \cf4 \\regPulsingRings\cf2 )\{\
				\
				~activeTasks[msg[1]] = \cf3 Task\cf2 (\{\
					msg.postln;\
					\
					if(msg[5] > 0)\{\
					~activeSynths[msg[1]].set(\cf4 \\dur\cf2 , msg[4]/60, \cf4 \\gate1\cf2 , 1);\
					\}\{\
					~activeSynths[msg[1]].set(\cf4 \\dur\cf2 , msg[4]/60, \cf4 \\gate2\cf2 , 1);\
					\};\
					\
					0.1.wait;\
					\
					~activeSynths[msg[1]].set(\cf4 \\gate2\cf2 , 0, \cf4 \\gate1\cf2 , 0);\
					\
				\
				\}).start;\
			\};\
			\
			if(~activeNames[msg[1]] == \cf4 \\statFlow\cf2 )\{\
					if(msg[5] < 0)\{\
						~activeTasks[msg[1]] = \cf3 Task\cf2 (\{\
							\
							msg.postln;\
							\
							~activeSynths[msg[1]].set(\cf4 \\cutGate\cf2 , 1, \cf4 \\eventDur\cf2 , msg[4]/60);\
							\cf3 Synth\cf2 .new(\cf4 \\statFlowEvent\cf2 , [\cf4 \\size\cf2 , msg[2], \cf4 \\dur\cf2 , msg[4]/60]);\
							\
							(msg[4]/60).wait;\
							\
							~activeSynths[msg[1]].set(\cf4 \\cutGate\cf2 , 0);\
						\
						\}).start;\
					\};\
			\};\
\
\
			\
		\};\
		\
	\}).add;\
\
\
)\
\
\
\
\
\
}